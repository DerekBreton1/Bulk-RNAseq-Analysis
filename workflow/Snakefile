files = ['SRR12007825', 'SRR12007837', 'SRR12007843', 'SRR12007847', 'SRR12007849', 'SRR12007851', 'SRR12007855', 'SRR12007861', 'SRR12007869']


rule all:
    input:
        'results/multiqc_report.html'


# Initial quality control
rule fastqc:
    input:
        fastq = 'data/{name}.fastq.gz'
    output:
        fastqc = 'results/{name}_fastqc.html'
    params:
        outdir = 'results/'
    conda:
        'envs/fastqc_env.yaml'
    shell:
        '''
        fastqc {input.fastq} -o {params.outdir}
        '''

# Aggregate the fastqc files
rule multiqc:
    input:
        expand('results/{name}_fastqc.html', name = files)
    output:
        report = 'results/multiqc_report.html'
    params:
        outdir = 'results/'
    conda:
        'envs/multiqc_env.yaml'
    shell:
        '''
        multiqc {params.outdir} -o {params.outdir}
        '''

# Get the Human GRCh38 primary assembly genome fasta file (release 47)
rule wget_h38:
    output:
        'results/GRCh38.primary_assembly.genome.fa'
    params:
        ftp_path = 'https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_47/GRCh38.primary_assembly.genome.fa.gz'
    shell:
        '''
        wget -P results/ {params.ftp_path}
        gunzip results/GRCh38.primary_assembly.genome.fa.gz
        '''

# Get the Human v47 primary assembly gtf file
rule wget_h38_gtf:
    output:
        'results/gencode.v47.primary_assembly.annotation.gtf'
    params:
        ftp_path = 'https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_47/gencode.v47.primary_assembly.annotation.gtf.gz'
    shell:
        '''
        wget -P results/ {params.ftp_path}
        gunzip results/gencode.v47.primary_assembly.annotation.gtf.gz
        '''

# Build STAR index
rule build_star_index:
    input:
        fa = 'results/GRCh38.primary_assembly.genome.fa',
        gtf = 'results/gencode.v47.primary_assembly.annotation.gtf'
    output:
        genome_dir = 'results/genome/'
    threads: 4
    conda:
        'envs/star_env.yaml'
    shell:
        '''
        STAR --runMode genomeGenerate --genomeDir {output.genome_dir} --genomeFastaFiles {input.fa} --sjdbGTFfile {input.gtf}
        '''

# Align reads to the reference genome
rule star:
    input:
        fastq = 'data/{name}.fastq.gz'
        genome_dir = 'results/genome'
    output:
        bam = 'results/{name}.Aligned.out.bam'
    params:
        prefix = 'results/{name}'
    threads: 4
    conda:
        'envs/star_env.yaml'
    shell:
        '''
        STAR --runThreadN {threads} --genomeDir {input.genome_dir} --readFilesIn {input.fastq} --readFilesCommand zcat --outSAMtype BAM Unsorted --outFileNamePrefix {params.prefix}
        '''

# Perform alignment level QC
rule samtools_flagstat:
    input:
        bam = 'results/{name}.Aligned.out.bam'
    output:
        flagstats = 'results/{name}_flagstats.txt'
    conda:
        'envs/samtools_env.yml'
    shell:
        '''
        samtools flagstats {input.bam} > {output.flagstats}
        '''

# Generate counts
rule verse:
    input:
        bam = 'results/{name}.Aligned.out.bam',
        gtf = 'results/gencode.v47.primary_assembly.annotation.gtf'
    output:
        verse_exons = 'results/{name}.exon.txt'
    params:
        prefix = 'results/{name}'
    conda:
        'envs/verse_env.yml'
    shell:
        '''
        verse -S -a {input.gtf} -o {params.prefix} {input.bam}

